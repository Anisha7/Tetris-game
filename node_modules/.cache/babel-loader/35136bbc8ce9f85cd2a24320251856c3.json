{"ast":null,"code":"import _objectSpread from \"/Users/anisha/OneDrive - Art Academy University/MakeSchool/few2-4/tetris/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { MOVE_RIGHT, MOVE_LEFT, MOVE_DOWN, ROTATE, PAUSE, RESUME, RESTART, GAME_OVER } from '../actions';\nimport { defaultState, nextRotation, canMoveTo } from '../utils';\n\nvar gameReducer = function gameReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState();\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var shape = state.shape,\n      grid = state.grid,\n      x = state.x,\n      y = state.y,\n      rotation = state.rotation,\n      nextShape = state.nextShape,\n      score = state.score,\n      isRunning = state.isRunning;\n\n  switch (action.type) {\n    case ROTATE:\n      var newRotation = nextRotation(shape, rotation);\n\n      if (canMoveTo(shape, grid, x, y, newRotation)) {\n        return _objectSpread({}, state, {\n          rotation: newRotation\n        });\n      }\n\n      return state;\n\n    case MOVE_RIGHT:\n      if (canMoveTo(shape, grid, x + 1, y, rotation)) {\n        return _objectSpread({}, state, {\n          x: x + 1\n        });\n      }\n\n      return state;\n\n    case MOVE_LEFT:\n      // subtract 1 from the x and check if this new position is possible by calling `canMoveTo()\n      if (canMoveTo(shape, grid, x - 1, y, rotation)) {\n        return _objectSpread({}, state, {\n          x: x - 1\n        });\n      }\n\n      return state;\n\n    case MOVE_DOWN:\n      return state;\n\n    case RESUME:\n      return state;\n\n    case PAUSE:\n      return state;\n\n    case GAME_OVER:\n      return state;\n\n    case RESTART:\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nexport default gameReducer;","map":{"version":3,"sources":["/Users/anisha/OneDrive - Art Academy University/MakeSchool/few2-4/tetris/src/reducers/game-reducer.js"],"names":["MOVE_RIGHT","MOVE_LEFT","MOVE_DOWN","ROTATE","PAUSE","RESUME","RESTART","GAME_OVER","defaultState","nextRotation","canMoveTo","gameReducer","state","action","shape","grid","x","y","rotation","nextShape","score","isRunning","type","newRotation"],"mappings":";AAAA,SACIA,UADJ,EACgBC,SADhB,EAC2BC,SAD3B,EACsCC,MADtC,EAEIC,KAFJ,EAEWC,MAFX,EAEmBC,OAFnB,EAE4BC,SAF5B,QAGS,YAHT;AAKA,SACIC,YADJ,EAEIC,YAFJ,EAGIC,SAHJ,QAGqB,UAHrB;;AAKA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAoC;AAAA,MAAnCC,KAAmC,uEAA3BJ,YAAY,EAAe;AAAA,MAAXK,MAAW;AAAA,MAC9CC,KAD8C,GACeF,KADf,CAC9CE,KAD8C;AAAA,MACvCC,IADuC,GACeH,KADf,CACvCG,IADuC;AAAA,MACjCC,CADiC,GACeJ,KADf,CACjCI,CADiC;AAAA,MAC9BC,CAD8B,GACeL,KADf,CAC9BK,CAD8B;AAAA,MAC3BC,QAD2B,GACeN,KADf,CAC3BM,QAD2B;AAAA,MACjBC,SADiB,GACeP,KADf,CACjBO,SADiB;AAAA,MACNC,KADM,GACeR,KADf,CACNQ,KADM;AAAA,MACCC,SADD,GACeT,KADf,CACCS,SADD;;AAGpD,UAAOR,MAAM,CAACS,IAAd;AACE,SAAKnB,MAAL;AACE,UAAMoB,WAAW,GAAGd,YAAY,CAACK,KAAD,EAAQI,QAAR,CAAhC;;AACA,UAAIR,SAAS,CAACI,KAAD,EAAQC,IAAR,EAAcC,CAAd,EAAiBC,CAAjB,EAAoBM,WAApB,CAAb,EAA+C;AAC3C,iCAAYX,KAAZ;AAAmBM,UAAAA,QAAQ,EAAEK;AAA7B;AACH;;AACD,aAAOX,KAAP;;AAEF,SAAKZ,UAAL;AACE,UAAIU,SAAS,CAACI,KAAD,EAAQC,IAAR,EAAcC,CAAC,GAAG,CAAlB,EAAqBC,CAArB,EAAwBC,QAAxB,CAAb,EAAgD;AAC9C,iCAAYN,KAAZ;AAAmBI,UAAAA,CAAC,EAAEA,CAAC,GAAG;AAA1B;AACD;;AACD,aAAOJ,KAAP;;AAEF,SAAKX,SAAL;AACE;AACA,UAAIS,SAAS,CAACI,KAAD,EAAQC,IAAR,EAAcC,CAAC,GAAG,CAAlB,EAAqBC,CAArB,EAAwBC,QAAxB,CAAb,EAAgD;AAC9C,iCAAYN,KAAZ;AAAmBI,UAAAA,CAAC,EAAEA,CAAC,GAAG;AAA1B;AACD;;AACD,aAAOJ,KAAP;;AAEF,SAAKV,SAAL;AAEE,aAAOU,KAAP;;AAEF,SAAKP,MAAL;AAEE,aAAOO,KAAP;;AAEF,SAAKR,KAAL;AAEE,aAAOQ,KAAP;;AAEF,SAAKL,SAAL;AAEE,aAAOK,KAAP;;AAEF,SAAKN,OAAL;AAEE,aAAOM,KAAP;;AAEF;AACE,aAAOA,KAAP;AA1CJ;AA4CH,CA/CD;;AAiDA,eAAeD,WAAf","sourcesContent":["import {\n    MOVE_RIGHT, MOVE_LEFT, MOVE_DOWN, ROTATE,\n    PAUSE, RESUME, RESTART, GAME_OVER\n  } from '../actions'\n  \nimport {\n    defaultState,\n    nextRotation,\n    canMoveTo } from '../utils'\n\nconst gameReducer = (state = defaultState(), action) => {\n  const { shape, grid, x, y, rotation, nextShape, score, isRunning } = state\n\n    switch(action.type) {\n      case ROTATE:\n        const newRotation = nextRotation(shape, rotation)\n        if (canMoveTo(shape, grid, x, y, newRotation)) {\n            return { ...state, rotation: newRotation }\n        }\n        return state\n  \n      case MOVE_RIGHT:\n        if (canMoveTo(shape, grid, x + 1, y, rotation)) {\n          return { ...state, x: x + 1 }\n        }\n        return state\n  \n      case MOVE_LEFT:\n        // subtract 1 from the x and check if this new position is possible by calling `canMoveTo()\n        if (canMoveTo(shape, grid, x - 1, y, rotation)) {\n          return { ...state, x: x - 1 }\n        }\n        return state\n  \n      case MOVE_DOWN:\n  \n        return state\n  \n      case RESUME:\n  \n        return state\n  \n      case PAUSE:\n  \n        return state\n  \n      case GAME_OVER:\n  \n        return state\n  \n      case RESTART:\n  \n        return state\n  \n      default:\n        return state\n    }\n}\n  \nexport default gameReducer"]},"metadata":{},"sourceType":"module"}