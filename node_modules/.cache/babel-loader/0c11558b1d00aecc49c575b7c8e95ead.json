{"ast":null,"code":"import _objectSpread from \"/Users/anisha/OneDrive - Art Academy University/MakeSchool/few2-4/tetris/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { MOVE_RIGHT, MOVE_LEFT, MOVE_DOWN, ROTATE, PAUSE, RESUME, RESTART, GAME_OVER } from '../actions';\nimport { defaultState, nextRotation, canMoveTo, addBlockToGrid, checkRows } from '../utils';\n\nvar gameReducer = function gameReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState();\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var shape = state.shape,\n      grid = state.grid,\n      x = state.x,\n      y = state.y,\n      rotation = state.rotation,\n      nextShape = state.nextShape,\n      score = state.score,\n      isRunning = state.isRunning;\n\n  switch (action.type) {\n    case ROTATE:\n      var newRotation = nextRotation(shape, rotation);\n\n      if (canMoveTo(shape, grid, x, y, newRotation)) {\n        return _objectSpread({}, state, {\n          rotation: newRotation\n        });\n      }\n\n      return state;\n\n    case MOVE_RIGHT:\n      if (canMoveTo(shape, grid, x + 1, y, rotation)) {\n        return _objectSpread({}, state, {\n          x: x + 1\n        });\n      }\n\n      return state;\n\n    case MOVE_LEFT:\n      // subtract 1 from the x and check if this new position is possible by calling `canMoveTo()\n      if (canMoveTo(shape, grid, x - 1, y, rotation)) {\n        return _objectSpread({}, state, {\n          x: x - 1\n        });\n      }\n\n      return state;\n\n    case MOVE_DOWN:\n      // Get the next potential Y position\n      var maybeY = y + 1; // Check if the current block can move here\n\n      if (canMoveTo(shape, grid, x, maybeY, rotation)) {\n        // If so move the block\n        return _objectSpread({}, state, {\n          y: maybeY\n        });\n      } // If not place the block\n\n\n      var newGrid = addBlockToGrid(shape, grid, x, y, rotation); // reset some things to start a new shape/block\n\n      var newState = defaultState();\n      newState.grid = newGrid;\n      newState.shape = nextShape;\n      newState.nextShape = randomShape();\n      newState.score = score;\n      newState.isRunning = isRunning;\n\n      if (!canMoveTo(nextShape, newGrid, 0, 4, 0)) {\n        // Game Over\n        console.log(\"Game Should be over...\");\n        newState.shape = 0;\n        return _objectSpread({}, state, {\n          gameOver: true\n        });\n      } // Update the score based on if rows were completed or not\n\n\n      newState.score = score + checkRows(newGrid);\n      return newState;\n\n    case RESUME:\n      return state;\n\n    case PAUSE:\n      return state;\n\n    case GAME_OVER:\n      return state;\n\n    case RESTART:\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nexport default gameReducer;","map":{"version":3,"sources":["/Users/anisha/OneDrive - Art Academy University/MakeSchool/few2-4/tetris/src/reducers/game-reducer.js"],"names":["MOVE_RIGHT","MOVE_LEFT","MOVE_DOWN","ROTATE","PAUSE","RESUME","RESTART","GAME_OVER","defaultState","nextRotation","canMoveTo","addBlockToGrid","checkRows","gameReducer","state","action","shape","grid","x","y","rotation","nextShape","score","isRunning","type","newRotation","maybeY","newGrid","newState","randomShape","console","log","gameOver"],"mappings":"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","sourcesContent":["import {\n    MOVE_RIGHT, MOVE_LEFT, MOVE_DOWN, ROTATE,\n    PAUSE, RESUME, RESTART, GAME_OVER\n  } from '../actions'\n  \nimport {\n    defaultState,\n    nextRotation,\n    canMoveTo,\n    addBlockToGrid,\n    checkRows\n  } from '../utils'\n\nconst gameReducer = (state = defaultState(), action) => {\n  const { shape, grid, x, y, rotation, nextShape, score, isRunning } = state\n\n    switch(action.type) {\n      case ROTATE:\n        const newRotation = nextRotation(shape, rotation)\n        if (canMoveTo(shape, grid, x, y, newRotation)) {\n            return { ...state, rotation: newRotation }\n        }\n        return state\n  \n      case MOVE_RIGHT:\n        if (canMoveTo(shape, grid, x + 1, y, rotation)) {\n          return { ...state, x: x + 1 }\n        }\n        return state\n  \n      case MOVE_LEFT:\n        // subtract 1 from the x and check if this new position is possible by calling `canMoveTo()\n        if (canMoveTo(shape, grid, x - 1, y, rotation)) {\n          return { ...state, x: x - 1 }\n        }\n        return state\n  \n      case MOVE_DOWN:\n        // Get the next potential Y position\n        const maybeY = y + 1\n        // Check if the current block can move here\n        if (canMoveTo(shape, grid, x, maybeY, rotation)) {\n            // If so move the block\n            return { ...state, y: maybeY }\n        }\n        // If not place the block\n        const newGrid = addBlockToGrid(shape, grid, x, y, rotation)\n        // reset some things to start a new shape/block\n        const newState = defaultState()\n        newState.grid = newGrid\n        newState.shape = nextShape\n        newState.nextShape = randomShape()\n        newState.score = score\n        newState.isRunning = isRunning\n      \n        if (!canMoveTo(nextShape, newGrid, 0, 4, 0)) {\n          // Game Over\n          console.log(\"Game Should be over...\")\n          newState.shape = 0\n          return { ...state, gameOver: true }\n        }\n        // Update the score based on if rows were completed or not\n        newState.score = score + checkRows(newGrid)\n      \n        return newState\n  \n      case RESUME:\n  \n        return state\n  \n      case PAUSE:\n  \n        return state\n  \n      case GAME_OVER:\n  \n        return state\n  \n      case RESTART:\n  \n        return state\n  \n      default:\n        return state\n    }\n}\n  \nexport default gameReducer"]},"metadata":{},"sourceType":"module"}