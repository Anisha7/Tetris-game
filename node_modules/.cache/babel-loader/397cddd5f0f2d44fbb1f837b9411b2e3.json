{"ast":null,"code":"import _objectSpread from \"/Users/anisha/OneDrive - Art Academy University/MakeSchool/few2-4/tetris/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { MOVE_RIGHT, MOVE_LEFT, MOVE_DOWN, ROTATE, PAUSE, RESUME, RESTART, GAME_OVER } from '../actions';\nimport { defaultState, nextRotation, canMoveTo, addBlockToGrid, checkRows, randomShape } from '../utils';\n\nvar gameReducer = function gameReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState();\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var shape = state.shape,\n      grid = state.grid,\n      x = state.x,\n      y = state.y,\n      rotation = state.rotation,\n      nextShape = state.nextShape,\n      score = state.score,\n      isRunning = state.isRunning;\n\n  switch (action.type) {\n    case ROTATE:\n      var newRotation = nextRotation(shape, rotation);\n\n      if (canMoveTo(shape, grid, x, y, newRotation)) {\n        return _objectSpread({}, state, {\n          rotation: newRotation\n        });\n      }\n\n      return state;\n\n    case MOVE_RIGHT:\n      if (canMoveTo(shape, grid, x + 1, y, rotation)) {\n        return _objectSpread({}, state, {\n          x: x + 1\n        });\n      }\n\n      return state;\n\n    case MOVE_LEFT:\n      // subtract 1 from the x and check if this new position is possible by calling `canMoveTo()\n      if (canMoveTo(shape, grid, x - 1, y, rotation)) {\n        return _objectSpread({}, state, {\n          x: x - 1\n        });\n      }\n\n      return state;\n\n    case MOVE_DOWN:\n      // Get the next potential Y position\n      var maybeY = y + 1; // Check if the current block can move here\n\n      if (canMoveTo(shape, grid, x, maybeY, rotation)) {\n        // If so move down don't place the block\n        return _objectSpread({}, state, {\n          y: maybeY\n        });\n      } // If not place the block\n      // (this returns an object with a grid and gameover bool)\n\n\n      var obj = addBlockToGrid(shape, grid, x, y, rotation);\n      var newGrid = obj.grid;\n      var gameOver = obj.gameOver;\n\n      if (gameOver) {\n        // Game Over\n        var _newState = _objectSpread({}, state);\n\n        _newState.shape = 0;\n        _newState.grid = newGrid;\n        return _objectSpread({}, state, {\n          gameOver: true\n        });\n      } // reset somethings to start a new shape/block\n\n\n      var newState = defaultState();\n      newState.grid = newGrid;\n      newState.shape = nextShape;\n      newState.score = score;\n      newState.isRunning = isRunning; // TODO: Check and Set level\n      // Score increases decrease interval\n\n      newState.score = score + checkRows(newGrid);\n      return newState;\n\n    case RESUME:\n      return _objectSpread({}, state, {\n        isRunning: true\n      });\n\n    case PAUSE:\n      return _objectSpread({}, state, {\n        isRunning: false\n      });\n\n    case GAME_OVER:\n      return state;\n\n    case RESTART:\n      return defaultState();\n\n    default:\n      return state;\n  }\n};\n\nexport default gameReducer;","map":{"version":3,"sources":["/Users/anisha/OneDrive - Art Academy University/MakeSchool/few2-4/tetris/src/reducers/game-reducer.js"],"names":["MOVE_RIGHT","MOVE_LEFT","MOVE_DOWN","ROTATE","PAUSE","RESUME","RESTART","GAME_OVER","defaultState","nextRotation","canMoveTo","addBlockToGrid","checkRows","randomShape","gameReducer","state","action","shape","grid","x","y","rotation","nextShape","score","isRunning","type","newRotation","maybeY","obj","newGrid","gameOver","newState"],"mappings":"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","sourcesContent":["import {\n    MOVE_RIGHT, MOVE_LEFT, MOVE_DOWN, ROTATE,\n    PAUSE, RESUME, RESTART, GAME_OVER\n  } from '../actions'\n  \nimport {\n    defaultState,\n    nextRotation,\n    canMoveTo,\n    addBlockToGrid,\n    checkRows,\n    randomShape\n  } from '../utils'\n\nconst gameReducer = (state = defaultState(), action) => {\n  const { shape, grid, x, y, rotation, nextShape, score, isRunning } = state\n\n    switch(action.type) {\n      case ROTATE:\n        const newRotation = nextRotation(shape, rotation)\n        if (canMoveTo(shape, grid, x, y, newRotation)) {\n            return { ...state, rotation: newRotation }\n        }\n        return state\n  \n      case MOVE_RIGHT:\n        if (canMoveTo(shape, grid, x + 1, y, rotation)) {\n          return { ...state, x: x + 1 }\n        }\n        return state\n  \n      case MOVE_LEFT:\n        // subtract 1 from the x and check if this new position is possible by calling `canMoveTo()\n        if (canMoveTo(shape, grid, x - 1, y, rotation)) {\n          return { ...state, x: x - 1 }\n        }\n        return state\n  \n      case MOVE_DOWN:\n        // Get the next potential Y position\n        const maybeY = y + 1\n        \n          // Check if the current block can move here\n          if (canMoveTo(shape, grid, x, maybeY, rotation)) {\n              // If so move down don't place the block\n              return { ...state, y: maybeY }\n          }\n        \n          // If not place the block\n          // (this returns an object with a grid and gameover bool)\n          const obj = addBlockToGrid(shape, grid, x, y, rotation)\n          const newGrid = obj.grid\n          const gameOver = obj.gameOver\n        \n          if (gameOver) {\n            // Game Over\n            const newState = { ...state }\n            newState.shape = 0\n            newState.grid = newGrid\n            return { ...state, gameOver: true }\n          }\n        \n          // reset somethings to start a new shape/block\n          const newState = defaultState()\n          newState.grid = newGrid\n          newState.shape = nextShape\n          newState.score = score\n          newState.isRunning = isRunning\n        \n          // TODO: Check and Set level\n          // Score increases decrease interval\n          newState.score = score + checkRows(newGrid)\n        \n          return newState\n  \n      case RESUME:\n  \n        return { ...state, isRunning: true }\n  \n      case PAUSE:\n  \n        return { ...state, isRunning: false }\n  \n      case GAME_OVER:\n  \n        return state\n  \n      case RESTART:\n  \n      return defaultState()\n  \n      default:\n        return state\n    }\n}\n  \nexport default gameReducer"]},"metadata":{},"sourceType":"module"}